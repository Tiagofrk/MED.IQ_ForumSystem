"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var body_parser_1 = __importDefault(require("body-parser"));
var cors_1 = __importDefault(require("cors"));
var compression_1 = __importDefault(require("compression"));
// import axios from 'axios';
// import httpContext from 'express-http-context';
var _1 = require(".");
exports.computeLength = _1.trpc
    .endpoint(function () { return function (str) {
    return str.length;
}; })
    .authorize(function () { return function (_id) {
    return true; //id.length < 12;
}; });
exports.testEndpoint = _1.trpc
    .endpoint(function (_ctx) { return function (id) {
    return id.length;
}; })
    .authorize(function () { return function (_id) {
    return true; //id.length < 12;
}; });
exports.createPost = _1.trpc
    .endpoint(function (ctx) { return function (content) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, new Promise(function (res) {
                    setTimeout(res, 3000);
                })];
            case 1:
                _a.sent();
                return [2 /*return*/, {
                        content: content,
                        token: ctx.token,
                    }];
        }
    });
}); }; })
    .authorize(function () { return function () {
    return true; //id.length < 12;
}; });
var userRouter = _1.trpc
    .router()
    .endpoint('testEndpoint', exports.testEndpoint)
    .endpoint('createPost', exports.createPost);
exports.rootRouter = _1.trpc
    .router()
    .compose('user', userRouter)
    .endpoint('getContext', _1.trpc.endpoint(function (ctx) { return function () { return ctx; }; }).authorize(function () { return function () { return true; }; }));
// const api = trpc.api(rootRouter);
exports.checkLocal = function (host) {
    return host.includes('localhost') || host.includes('127.0.0.1');
};
exports.app = express_1.default();
exports.app.use(cors_1.default());
exports.app.use(compression_1.default());
exports.app.use(body_parser_1.default.json());
exports.app.use(body_parser_1.default.urlencoded({
    limit: '50mb',
    extended: true,
    parameterLimit: 50000,
}));
exports.app.post('/rpc', exports.rootRouter.toExpress());
exports.app.listen(5000, function () { return __awaiter(_this, void 0, void 0, function () {
    var mySDK, _a, _b, _c, _d, _e, _f;
    var _this = this;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                console.log("listening on port 5000...");
                mySDK = _1.trpc.sdk({
                    url: 'http://localhost:5000/rpc',
                    getContext: function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, { token: 'hello there' }];
                        });
                    }); },
                });
                console.log(exports.rootRouter.toServerSDK().user.testEndpoint({}, 'this is a test string'));
                _b = (_a = console).log;
                return [4 /*yield*/, mySDK.user.testEndpoint('thisisanid')];
            case 1:
                _b.apply(_a, [_g.sent()]);
                _d = (_c = console).log;
                return [4 /*yield*/, mySDK.getContext()];
            case 2:
                _d.apply(_c, [_g.sent()]);
                _f = (_e = console).log;
                return [4 /*yield*/, mySDK.user.createPost('This is my post!')];
            case 3:
                _f.apply(_e, [_g.sent()]);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=dryrun.js.map