/// <reference types="node" />
import http from 'http';
import ws from 'ws';
import { BaseOptions, CreateContextFn } from '../http';
import { AnyRouter, ProcedureType } from '../router';
export declare type WSProcedureCall<TInput> = {
    path: string;
    input: TInput;
};
export declare type JSONRPC2ProcedureRequestEnvelope<TInput> = {
    id: number;
    jsonrpc: '2.0';
    method: ProcedureType;
    params: {
        input: TInput;
        path: string;
    };
};
export declare type JSONRPC2ProcedureStopEnvelope = {
    id: number;
    jsonrpc: '2.0';
    method: 'stop';
};
export declare type JSONRPC2ProcedureStoppedEnvelope = {
    id: number;
    jsonrpc: '2.0';
    result: 'stopped';
};
export declare type JSONRPC2ReconnectEnvelope = {
    id: number;
    jsonrpc: '2.0';
    result: 'reconnect';
};
export declare type JSONRPC2RequestEnvelope<TInput = unknown> = {
    id: number | null;
    jsonrpc: '2.0';
} & (JSONRPC2ProcedureRequestEnvelope<TInput> | JSONRPC2ProcedureStopEnvelope);
export declare type JSONRPC2ResponseEnvelope<TResult = unknown> = {
    jsonrpc: '2.0';
    result: TResult;
    id: number;
} | JSONRPC2ProcedureStoppedEnvelope | JSONRPC2ReconnectEnvelope;
/**
 * Web socket server handler
 */
export declare type WSSHandlerOptions<TRouter extends AnyRouter> = {
    router: TRouter;
    wss: ws.Server;
    createContext: CreateContextFn<TRouter, http.IncomingMessage, ws>;
    process?: NodeJS.Process;
} & BaseOptions<TRouter, http.IncomingMessage>;
export declare function applyWSSHandler<TRouter extends AnyRouter>(opts: WSSHandlerOptions<TRouter>): {
    reconnectAllClients: () => void;
};
