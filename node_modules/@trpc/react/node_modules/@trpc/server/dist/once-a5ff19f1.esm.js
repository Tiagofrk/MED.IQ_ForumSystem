class TRPCError extends Error {
  constructor({
    message,
    code,
    originalError
  }) {
    super(message);
    this.originalError = void 0;
    this.code = void 0;
    this.code = code;
    this.originalError = originalError;
    this.name = 'TRPCError';
    Object.setPrototypeOf(this, new.target.prototype);
  }

}
const inputValidationError = (message, opts = {}) => new TRPCError({
  message,
  code: 'BAD_USER_INPUT',
  ...opts
});
const notFoundError = (message, opts = {}) => new TRPCError({
  message,
  code: 'NOT_FOUND',
  ...opts
});
const internalServerError = originalError => {
  const message = getMessageFromUnkownError(originalError, 'Internal Server Error');
  return new TRPCError({
    message,
    code: 'INTERNAL_SERVER_ERROR',
    originalError
  });
};
function getMessageFromUnkownError(err, fallback) {
  if (typeof err === 'string') {
    return err;
  } // eslint-disable-next-line @typescript-eslint/no-explicit-any


  const message = err === null || err === void 0 ? void 0 : err.message;

  if (typeof message === 'string') {
    return message;
  }

  return fallback;
}
function getErrorFromUnknown(err) {
  // this should ideally be an `instanceof TRPCError` but for some reason that isn't working
  // ref https://github.com/trpc/trpc/issues/331
  if (err instanceof Error && err.name === 'TRPCError') {
    return err;
  }

  return internalServerError(err);
}

const once = fn => {
  let done = false;
  return function (...args) {
    return done ? void 0 : (done = true, fn.apply(this, args));
  };
};
const deprecateTransformWarning = /*#__PURE__*/once(() => {
  console.warn('⚠️ DEPRECATION WARNING: transformers usage have moved from the HTTP-handler to your router, see https://trpc.io/docs/data-transformers');
});

export { TRPCError as T, getMessageFromUnkownError as a, deprecateTransformWarning as d, getErrorFromUnknown as g, inputValidationError as i, notFoundError as n };
