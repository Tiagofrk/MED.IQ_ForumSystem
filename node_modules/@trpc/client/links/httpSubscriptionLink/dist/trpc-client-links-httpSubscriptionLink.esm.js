import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import { T as TRPCClientError } from '../../../dist/createTRPCClient-333f39b3.esm.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/assertThisInitialized';
import '@babel/runtime/helpers/inherits';
import '@babel/runtime/helpers/createSuper';
import '@babel/runtime/helpers/wrapNativeSuper';
import '@babel/runtime/regenerator';
import '@babel/runtime/helpers/createForOfIteratorHelper';

function httpSubscriptionLink() {
  return function () {
    return function (_ref) {
      var next = _ref.next,
          prev = _ref.prev,
          op = _ref.op,
          onDestroy = _ref.onDestroy;

      if (op.type !== 'subscription') {
        next(op, prev);
        return;
      }

      var input = op.input == null ? {} : op.input;
      var cursor = input.cursor;
      var destroyed = false;
      onDestroy(function () {
        destroyed = true;
      });

      function iterate() {
        if (destroyed) {
          return;
        }

        var nextOp = _objectSpread(_objectSpread({}, op), {}, {
          input: _objectSpread(_objectSpread({}, input), {}, {
            cursor: cursor
          })
        });

        next(nextOp, function (result) {
          var _result$data;

          if (result instanceof Error) {
            var _result$result;

            // timeout - told to reconnect
            ((_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.statusCode) === 408;
            iterate();
            return;
          }

          cursor = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.cursor;

          if (!cursor) {
            prev(TRPCClientError.from(new Error('Expected result to return a `cursor` property - needed for HTTP subscriptions')));
            return;
          }

          iterate();
        });
      }

      iterate();
    };
  };
}

export { httpSubscriptionLink };
