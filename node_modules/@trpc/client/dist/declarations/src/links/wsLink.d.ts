import { AnyRouter, ProcedureType } from '@trpc/server';
import { JSONRPC2ResponseEnvelope } from '@trpc/server/ws';
import { ObservableCallbacks, UnsubscribeFn } from '../internals/observable';
import { retryDelay } from '../internals/retryDelay';
import { TRPCLink } from './core';
export declare function createWSClient(opts: {
    url: string;
    WebSocket?: WebSocket;
    retryDelayMs?: typeof retryDelay;
    /**
     * If the server emits a `reconnect` event
     * @default 1000
     */
    staleConnectionTimeoutMs?: number;
    reconnectDelayMs?: () => number;
}): {
    close: () => void;
    request: (op: {
        type: ProcedureType;
        input: unknown;
        path: string;
    }, callbacks: ObservableCallbacks<JSONRPC2ResponseEnvelope, unknown>) => UnsubscribeFn;
    getConnection(): WebSocket;
};
export declare type TRPCWebSocketClient = ReturnType<typeof createWSClient>;
export interface WebSocketLinkOptions {
    client: TRPCWebSocketClient;
}
export declare class WebSocketInterruptedError extends Error {
    constructor(message: string);
}
export declare function wsLink<TRouter extends AnyRouter>(opts: WebSocketLinkOptions): TRPCLink<TRouter>;
