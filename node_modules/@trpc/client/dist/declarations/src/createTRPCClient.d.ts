import type { AnyRouter, ClientDataTransformerOptions, inferHandlerInput, inferProcedureInput, inferSubscriptionOutput, Maybe, TRPCProcedureErrorEnvelope, TRPCProcedureSuccessEnvelope } from '@trpc/server';
import { ObservableCallbacks, UnsubscribeFn } from './internals/observable';
import { CancelFn, LinkRuntimeOptions, OperationContext, TRPCLink } from './links/core';
declare type CancellablePromise<T = unknown> = Promise<T> & {
    cancel: CancelFn;
};
export declare class TRPCClientError<TRouter extends AnyRouter> extends Error {
    readonly result?: Maybe<TRPCProcedureErrorEnvelope<TRouter>>;
    readonly res?: Maybe<Response>;
    readonly originalError?: Maybe<Error>;
    readonly shape?: TRPCProcedureErrorEnvelope<TRouter>['error'];
    /**
     * Fatal error - expect no more results after this error
     */
    readonly isDone: boolean;
    constructor(message: string, { result, originalError, isDone, }: {
        result: Maybe<TRPCProcedureErrorEnvelope<TRouter>>;
        originalError: Maybe<Error>;
        isDone?: boolean;
    });
    static from<TRouter extends AnyRouter>(result: Error | TRPCProcedureErrorEnvelope<TRouter>, opts?: {
        isDone?: boolean;
    }): TRPCClientError<TRouter>;
}
export interface FetchOptions {
    fetch?: typeof fetch;
    AbortController?: typeof AbortController;
}
export declare type CreateTRPCClientOptions<TRouter extends AnyRouter> = {
    /**
     * @deprecated likely to be removed
     */
    onSuccess?: (data: TRPCProcedureSuccessEnvelope<unknown>) => void;
    /**
     * @deprecated likely to be removed
     */
    onError?: (error: TRPCClientError<TRouter>) => void;
    /**
     * add ponyfills for fetch / abortcontroller
     */
    fetchOpts?: FetchOptions;
    headers?: LinkRuntimeOptions['headers'] | ReturnType<LinkRuntimeOptions['headers']>;
    transformer?: ClientDataTransformerOptions;
} & ({
    url: string;
} | {
    links: TRPCLink<TRouter>[];
});
declare type TRPCType = 'subscription' | 'query' | 'mutation';
export declare type RequestOptions = {
    context?: OperationContext;
};
export declare class TRPCClient<TRouter extends AnyRouter> {
    private readonly links;
    readonly runtime: LinkRuntimeOptions;
    private opts;
    constructor(opts: CreateTRPCClientOptions<TRouter>);
    /**
     * @deprecated will be turned private
     */
    request<TInput = unknown, TOutput = unknown>(opts: {
        type: TRPCType;
        input: TInput;
        path: string;
        context?: OperationContext;
    }): CancellablePromise<TOutput>;
    private $request;
    private requestAsPromise;
    query<TQueries extends TRouter['_def']['queries'], TPath extends string & keyof TQueries>(path: TPath, ...args: [...inferHandlerInput<TQueries[TPath]>, RequestOptions?]): CancellablePromise<import("@trpc/server").ThenArg<ReturnType<TQueries[TPath]["call"]>>>;
    mutation<TMutations extends TRouter['_def']['mutations'], TPath extends string & keyof TMutations>(path: TPath, ...args: [...inferHandlerInput<TMutations[TPath]>, RequestOptions?]): CancellablePromise<import("@trpc/server").ThenArg<ReturnType<TMutations[TPath]["call"]>>>;
    subscriptionOnce<TSubscriptions extends TRouter['_def']['subscriptions'], TPath extends string & keyof TSubscriptions, TOutput extends inferSubscriptionOutput<TRouter, TPath>, TInput extends inferProcedureInput<TSubscriptions[TPath]>>(path: TPath, input: TInput, opts?: RequestOptions): CancellablePromise<TOutput[]>;
    /**
     * @deprecated - legacy stuff for http subscriptions
     */
    subscription<TSubscriptions extends TRouter['_def']['subscriptions'], TPath extends string & keyof TSubscriptions, TOutput extends inferSubscriptionOutput<TRouter, TPath>, TInput extends inferProcedureInput<TSubscriptions[TPath]>>(path: TPath, opts: {
        initialInput: TInput;
        onError?: (err: TRPCClientError<TRouter>) => void;
        onData?: (data: TOutput[]) => void;
        /**
         * Input cursor for next call to subscription endpoint
         */
        nextInput: (data: TOutput[]) => TInput;
        context?: OperationContext;
    }): CancelFn;
    $subscription<TSubscriptions extends TRouter['_def']['subscriptions'], TPath extends string & keyof TSubscriptions, TOutput extends inferSubscriptionOutput<TRouter, TPath>, TInput extends inferProcedureInput<TSubscriptions[TPath]>>(path: TPath, input: TInput, opts: RequestOptions & ObservableCallbacks<TOutput, TRPCClientError<TRouter>>): UnsubscribeFn;
}
export declare function createTRPCClient<TRouter extends AnyRouter>(opts: CreateTRPCClientOptions<TRouter>): TRPCClient<TRouter>;
export {};
