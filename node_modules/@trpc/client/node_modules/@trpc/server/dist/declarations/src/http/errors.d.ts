import { TRPCError, TRPCErrorOptions } from '../errors';
export interface HttpErrorOptions<TCode extends string> extends TRPCErrorOptions {
    code: TCode;
    statusCode: number;
}
export declare class HTTPError<TCode extends string> extends TRPCError<TCode> {
    readonly statusCode: number;
    constructor(message: string, opts: HttpErrorOptions<TCode>);
}
export declare const httpError: {
    forbidden: (message?: string | undefined) => HTTPError<"FORBIDDEN">;
    unauthorized: (message?: string | undefined) => HTTPError<"UNAUTHENTICATED">;
    badRequest: (message?: string | undefined) => HTTPError<"BAD_USER_INPUT">;
    notFound: (message?: string | undefined) => HTTPError<"NOT_FOUND">;
};
export declare function getStatusCodeFromError(err: TRPCError): number;
