import { r as requestHandler } from './index-1a4e8243.esm.js';
export { H as HTTPError, a as assertNotBrowser, g as getStatusCodeFromError, h as httpError, r as requestHandler } from './index-1a4e8243.esm.js';
export { R as Router, r as router } from './router-5bb70c03.esm.js';
export { S as Subscription, s as subscriptionPullFactory } from './subscription-2bd72e23.esm.js';
import http from 'http';
import url from 'url';
import './once-a5ff19f1.esm.js';
import 'events';

/* eslint-disable @typescript-eslint/no-non-null-assertion */
function createHttpHandler(opts) {
  return async (req, res) => {
    const endpoint = url.parse(req.url).pathname.substr(1);
    await requestHandler({ ...opts,
      req,
      res,
      path: endpoint
    });
  };
}
function createHttpServer(opts) {
  const handler = createHttpHandler(opts);
  const server = http.createServer((req, res) => handler(req, res));
  return {
    server,

    listen(port) {
      server.listen(port);
      const actualPort = port === 0 ? server.address().port : port;
      return {
        port: actualPort
      };
    }

  };
}

export { createHttpHandler, createHttpServer };
